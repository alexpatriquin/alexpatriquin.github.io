<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails 4 | SquareCraft]]></title>
  <link href="http://alexpatriquin.github.io/blog/categories/rails-4/atom.xml" rel="self"/>
  <link href="http://alexpatriquin.github.io/"/>
  <updated>2014-05-12T13:11:13-04:00</updated>
  <id>http://alexpatriquin.github.io/</id>
  <author>
    <name><![CDATA[Alex Patriquin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing Stackup]]></title>
    <link href="http://alexpatriquin.github.io/stackup-angellist-for-tech-stacks"/>
    <updated>2014-05-12T13:01:43-04:00</updated>
    <id>http://alexpatriquin.github.io/introducing-stackup</id>
    <content type="html"><![CDATA[<p><a href="http://stackupapp.herokuapp.com/"><img class="center" src="../images/post_images/crowdsurge-serp.png" title="&ldquo;StackupApp&rdquo;" ></a></p>

<h2>Description</h2>

<p><a href="http://stackupapp.herokuapp.com/">StackupApp</a> is AngelList for tech stacks. The app seeks to map out the current technology landscape of the startup ecosystem. The app injests startups from the AngelList API and tags each startup with programming language and tech stack keywords from Indeed job postings.</p>

<p>Currently there at 5,318 New York City-based startups on StackupApp, of which 693 have been tagged.</p>

<h2>Technical Features</h2>

<h5>APIs and OAuth</h5>

<p>In addition to retrieving startup information from the AngelList API and job postings from Indeed&rsquo;s API, StackupApp also enables users to sign in via AngelList OAuth. <a href="https://github.com/alexpatriquin/stackupapp/blob/master/app/models/user.rb">The OAuth implementation</a> relies upon Devise and OmniAuth.</p>

<p>If the user is a Founder of a AngelList startup also on StackupApp, they will see a Manage section on the startup&rsquo;s page and their profile page. The Manage section enables the user to Edit the startup&rsquo;s tags (under development), Unclaim or Deadpool the startup.</p>

<p>If you don&rsquo;t have an AngelList profile or would like to use a demo account, you can sign in via AngelList OAuth with the StackupApp test account credentials (hello at poemtoday dot com, abcd1234).</p>

<p><a href="http://stackupapp.herokuapp.com/"><img class="center" src="../images/post_images/manage.png" title="&ldquo;Manage&rdquo;" ></a></p>

<h5>RESTful Routes</h5>

<p>StackupApp is built with Rails, and takes full advantage of the framework&rsquo;s REST conventions. The Unclaim and Deadpool buttons intiate DELETE actions on the <a href="https://github.com/alexpatriquin/stackupapp/blob/master/app/controllers/user_startups_controller.rb">UserStartups</a> and <a href="/app/controllers/startups_controller.rb">Startups</a> controllers, respectively, and can only be access as an authenticated user.</p>

<h5>Backgrounds jobs with Sidekiq and Redis</h5>

<p>When a user has signed in via AngelList, the app makes an API request to AngelList to retrieve the user&rsquo;s startups. This request is made via a background job to improve performance, specifcially via <a href="https://github.com/alexpatriquin/stackupapp/blob/master/app/workers/angellist_worker.rb">a Sidekiq Worker </a> and Redis.</p>

<h5>Scopes and counter_cache</h5>

<p>The app displays startups and technology tags by popularity scopes. Tag popularity is determined by counting the number of <a href="https://github.com/alexpatriquin/stackupapp/blob/master/app/models/startup_tag.rb">StatupTags</a> or job postings with each tag. A <code>counter_cache</code> is used on the StartupTag table to improve performance. The AngelList API provides <code>follower_count</code> which serves as the startup popularity metric.</p>

<p>The app enables users to <code>search_by_name</code> for startups or <code>search_by_tag</code> for tecnologies, which is implemented with the <code>pg_search</code> gem on <a href="https://github.com/alexpatriquin/stackupapp/blob/master/app/models/startup.rb">the Startup model</a>. Only startups that have been tagged are shown in the index and search results, while all startups are searchable by name.</p>

<h2>Continuing Development</h2>

<p>Continuing development plans include moving the frontend into Ember.js. Also, expanding to SF and Boston.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twilio Text-To-Speech in Rails 4]]></title>
    <link href="http://alexpatriquin.github.io/twilio-text-to-speech-in-rails-4"/>
    <updated>2014-05-04T15:06:41-04:00</updated>
    <id>http://alexpatriquin.github.io/twilio-text-to-speech-in-rails-4</id>
    <content type="html"><![CDATA[<p>This post walks through the steps I took to set up text-to-speech in a Rails 4 app. To learn about other options for implementing text-to-speech in web apps generally, see <a href="/text-to-speech-options-for-web-apps">Text-To-Speech Options for Web Apps</a>.</p>

<p>Also, the Twilio blog has a tutorial worth reading, <a href="https://www.twilio.com/blog/2014/02/twilio-on-rails-integrating-twilio-with-your-rails-4-app.html">Integrating Twilio With Your Rails 4 App</a>, but it does not cover setting up the crucial <a href="https://www.twilio.com/docs/client/device">Twilio.Device</a>, the &ldquo;conduit&rdquo; for TTS and a lot of other Twilio API goodness, in Rails 4.</p>

<p>Before we get started, note that Twilio.Device only works when connected to the internet. So you can’t test Twilio.Device from localhost. Instead, you’ll need to expose your localhost to the internet with a utility called ngrok. (See #9 below.)</p>

<p>In order to set up Twilio TTS in a Rails 4 app, we need to complete 10 steps.</p>

<ol>
<li>Sign up for Twilio</li>
<li>Install the twilio-ruby gem</li>
<li>Add endpoint for Twilio</li>
<li>Disable DSRF Detection on Twilio endpoint</li>
<li>Create a TwiML App</li>
<li>Setup Capability Tokens</li>
<li>Put Capability Token and text in an HTML form</li>
<li>Add Twilio.Device javascript</li>
<li>Setup ngrok to test</li>
<li>Deploy</li>
</ol>


<!-- more -->


<p>For this walkthrough, I&rsquo;ll refer to code examples from <a href="http://www.poemtoday.com/">PoemToday</a>, a Rails 4 app that generates random poems from user input and reads them aloud. Let&rsquo;s begin.</p>

<h3>1) Sign up for Twilio</h3>

<p>Easy enough. You’ll need an Account <code>SID</code> (short for “security identifier”) and <code>Auth Token</code>. Remember to hide these keys in <code>secrets.yml</code> if you’re pushing up to a public repo.</p>

<h3>2) Install the twilio-ruby gem</h3>

<p>Twilio provides an <a href="https://github.com/twilio/twilio-ruby">official ruby wrapper</a>. We’ll use the DSL from the gem to create TWiML, or Twilio XML, and to create Capability Tokens.</p>

<h3>3) Add endpoints for Twilio</h3>

<p>We’re going to create a POST endpoint for Twilio to tap into our app and receive the text we want read aloud. To do this in PoemToday, I added a <code>voice</code> action on my poems controller.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>post &lsquo;poems/voice&rsquo; => &lsquo;poems#voice&rsquo;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then, within the PoemsController, I setup the <code>voice</code> action to build a Twilio Response Object with the text we want spoken (sent as <code>params</code>). The method utilizes Twilio&rsquo;s <a href="https://www.twilio.com/docs/api/twiml/say">Say</a> verb and renders the <code>response</code> as TwiML.</p>

<p>```ruby Twilio Endpoint Example <a href="https://github.com/alexpatriquin/poem-today/blob/master/app/controllers/poems_controller.rb">https://github.com/alexpatriquin/poem-today/blob/master/app/controllers/poems_controller.rb</a> source
class PoemsController &lt; ApplicationController
  after_filter :set_header, only: :voice
  include Webhookable</p>

<p>  def voice</p>

<pre><code>response = Twilio::TwiML::Response.new do |r|
  r.Say "#{params[:poem_content]}"
end
render_twiml response
</code></pre>

<p>  end
end
```</p>

<p>This code makes use of the <code>set_header</code> and <code>render_twiml</code> helper methods from the Twilio Rails 4 tutorial, which we can put into a <code>Webhookable</code> module in Concerns.</p>

<p>```ruby Webhookable Concern <a href="https://github.com/alexpatriquin/poem-today/blob/master/app/controllers/concerns/webhookable.rb">https://github.com/alexpatriquin/poem-today/blob/master/app/controllers/concerns/webhookable.rb</a> source</p>

<p>module Webhookable
  extend ActiveSupport::Concern</p>

<p>  def set_header</p>

<pre><code>response.headers["Content-Type"] = "text/xml"
</code></pre>

<p>  end</p>

<p>  def render_twiml(response)</p>

<pre><code>render text: response.text
</code></pre>

<p>  end
end
```</p>

<p>One way to think about this code is that we’re creating an endpoint in a special variant of XML for Twilio to come and read. We’re creating a private API for Twilio.</p>

<h3>4) Disable CSRF Protection on Twilio endpoint</h3>

<p>By default, Rails 4 blocks 3rd parties from <code>POST</code>ing, so as to prevent CSRF attacks. To accomplish this, Rails generates a random token when a form is created and then checks the token when the form is submitted. We want to accept a <code>POST</code> from Twilio, so we&rsquo;ll disable CSRF detection for the voice controller action.</p>

<p>```ruby
class PoemsController &lt; ApplicationController
  skip_before_action :verify_authenticity_token, only: :voice</p>

<p>```</p>

<h3>5) Create a TwiML App</h3>

<p>Now that we have a permitted endpoint, we can create a new TwiML App, which is just a set of URLs that tells Twilio what to do when it receives a call via telephone or Twilio.Device.</p>

<p>Create a new TwiML App under Dev Tools in your account and enter the <code>POST</code> endpoint (ie, <code>http://poemtoday/poems/voice</code>) as the <code>Voice Request URL</code>. After saving, note your new TwiML App’s <code>SID</code>, which we’ll need to create Capability Tokens.</p>

<h3>6) Setup Capability Tokens</h3>

<p>In order to invoke Twilio.Device, users need to have a valid <a href="https://www.twilio.com/docs/client/capability-tokens">Capability Token</a>. Tokens are valid for 24 hours and it’s better for security reasons to give each of your users their own token. I actually create one on each poem page load.</p>

<p>Tokens can have Incoming or Outgoing Connection capabilities, or both. Since we want Twilio to <code>POST</code> to  our app, we’ll configure these Capability Tokens with an Outgoing Connection and pass in our TwiML App&rsquo;s <code>SID</code>, which lets Twilio know where to find our <code>voice</code> endpoint.</p>

<p>```ruby Generating Twilio Capability Tokens <a href="https://github.com/alexpatriquin/poem-today/blob/master/app/controllers/poems_controller.rb">https://github.com/alexpatriquin/poem-today/blob/master/app/controllers/poems_controller.rb</a> source
class PoemsController &lt; ApplicationController</p>

<p>  def show</p>

<pre><code>@poem = Poem.find(params[:id])
new_twilio_token
</code></pre>

<p>  end</p>

<p>  def new_twilio_token</p>

<pre><code>capability = Twilio::Util::Capability.new(ENV["TWILIO_ACCOUNT_SID"],ENV["TWILIO_AUTH_TOKEN"])
capability.allow_client_outgoing(ENV["TWILIO_APPLICATION_SID"])
@token = capability.generate
</code></pre>

<p>  end
end
```</p>

<p>Note that we’re creating <code>@token</code>, an instance variable on the controller, so that we can pass it up to the view.</p>

<h3>7) Put Capability Token and text in an HTML form</h3>

<p>As we saw above in PoemsController, our Twilio Response Object accepts the text to be spoken as params, which we can send via form submission. We can use the HTML <code>data</code> attribute tag to pass the <code>@token</code> to javascript.</p>

<p><a href="http://www.poemtoday.com/poems/5706?keyword=voice"><img class="center" src="../images/post_images/voice-icon.png" width="300"></a></p>

<p>PoemToday actually uses a hidden form and the <code>volume-up</code> icon from <a href="http://fortawesome.github.io/">Font Awesome</a> for a submit button.</p>

<p><code>erb
&lt;%= hidden_field_tag "content", "#{@poem.content}", id: "poem-content" %&gt;
&lt;%= content_tag "div", id: "token", data: {token: @token } do %&gt;
&lt;%= button_tag fa_icon("volume-up lg"), id: "keillorbot" %&gt;
</code></p>

<h3>8) Add Twilio.Device javascript</h3>

<p>Twilio’s TTS works through Twilio.Device, an API object. Twilio.Device serves as the main entry point for connecting with Twilio. For TTS, a connection can be understood as both a telephone and an api call. Twilio.Device connects, sends the relevant text to Twilio, holds open a port which receives an audio reading of the text, and then disconnects / hangs up.</p>

<p>Twilio.Device is only available on pages that have <a href="https://www.twilio.com/docs/client/twilio-js">twilio.js</a>. PoemToday is mostly poem pages, so I added a <code>javascript_include_tag</code> to my layout.</p>

<p><code>javascript
&lt;%= javascript_include_tag "//static.twilio.com/libs/twiliojs/1.1/twilio.min.js" %&gt;
</code></p>

<p>Finally, we’re ready to add the javascript that will invoke Twilio.Device with the user’s token and pass the text we want read aloud (ie, <code>#poem-content</code>). The code below disables the button while the connection is active.</p>

<p>```javascript Twilio.Device Example <a href="https://github.com/alexpatriquin/poem-today/blob/master/app/assets/javascripts/poems.js">https://github.com/alexpatriquin/poem-today/blob/master/app/assets/javascripts/poems.js</a> source
$(document).ready(function() {
  var token = $(&lsquo;#token&rsquo;).data(&lsquo;token&rsquo;);
  Twilio.Device.setup(token,{&ldquo;debug&rdquo;:true});
  $(&ldquo;#keillorbot&rdquo;).click(function() {</p>

<pre><code>  speak();
</code></pre>

<p>  });</p>

<p>  function speak() {</p>

<pre><code>  var poem_content = $("#poem-content").val(); 
  $('#keillorbot').attr('disabled', 'disabled');
  Twilio.Device.connect({ 'poem_content':poem_content });
</code></pre>

<p>  }</p>

<p>  Twilio.Device.disconnect(function (conn) {</p>

<pre><code>  $('#keillorbot').removeAttr('disabled');
</code></pre>

<p>  });
});
```</p>

<h3><a name="ngrok"></a>9) Setup ngrok to test</h3>

<p>As mentioned above, Twilio.Device only works when connected to the internet. To test, you’ll need to make localhost accessible via the internet with a utility such as ngrok. Twilio provides a good tutorial on <a href="https://www.twilio.com/blog/2013/10/test-your-webhooks-locally-with-ngrok.html">how to setup ngrok</a>.</p>

<p>Be sure to create a second TwiML App with your currently running ngrok address as your root domain. It should look something like <code>http://3eb3c9ba.ngrok.com/poems/voice</code>.</p>

<h3><a name="deploy"></a>10) Deploy</h3>

<p>That’s it! If you’ve completed all the steps above, you should be good to go with adding text-to-speech to your Rails 4 app.</p>

<p>If you run into any trouble or have any questions, feel free to ask me for help in the comments below or <a href="https://twitter.com/apatriq">message me on Twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Built PoemToday]]></title>
    <link href="http://alexpatriquin.github.io/how-i-built-poemtoday"/>
    <updated>2014-04-28T18:49:57-04:00</updated>
    <id>http://alexpatriquin.github.io/how-i-built-poemtoday</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;m introducing <a href="http://www.poemtoday.com/">PoemToday</a>, a random poem generator that&rsquo;s powered by user behavior. Here is the story of how it works and how I made it.</p>

<p><a href="http://www.poemtoday.com/poems/3568?keyword=plato"><img class="center" src="../images/post_images/stats-poem.png" width="500"></a></p>

<p>PoemToday (also on <a href="https://github.com/alexpatriquin/poem-today">Github</a>) is a Rails web app that statistically generates a poem based on its users' profile and behavior. Each of the 6,000 poems on the site actually has a link wrapped around every word in every poem. When a user clicks one of the words, the site initiates a search of its database for the best-matching poem and redirects the user to the top result, alongside with the top image from the Flickr API for that word.</p>

<p>```ruby
def save_top_result
  @poem = @results.inject do |winning,result|
  winning[:match_score] > result[:match_score] ? winning : result
  end
end</p>

<p>def get_image_url(keyword)
  flickr.photos.search(&ldquo;text&rdquo;=>&ldquo;#{keyword}&rdquo;, &ldquo;sort&rdquo;=> &ldquo;relevance&rdquo;).first
end
```</p>

<p>Behind the scenes, PoemToday is storing information about all of the words the user has clicked and the poems the user has visited in a temporary session. When the session has enough data, it statistically generates a completely unique &ldquo;ephemeral&rdquo; poem with a statistical process known as a <a href="http://en.wikipedia.org/wiki/Markov_chain">Markov chain</a>.</p>

<!-- more -->


<h3>simplenlg vs. Markov chains</h3>

<p>Initially I tried to implement a linguistics strategy for randomly generating poems. If a user had clicked three nouns, I figured,  how difficult would it be to find a verb and then create a semi-sensical sentence? Using the Wordnik API and a ruleset I could fill in the missing parts of speech.</p>

<p>I spent a while building a Natural Language Generator without realizing that was what I was doing. Then I stumbled on simplenlg, both the <a href="https://code.google.com/p/simplenlg/">Java API</a> and the <a href="https://github.com/efi/simplenlg">ruby gem</a>, which opened up a whole new tangent of linguistic programming to me. I really love language (why else would I make a random poetry app?? ;) and this intersection of code and linguistics was an especially exciting turn in the project.</p>

<p>With user-selected keywords, simplenlg, and the Wordnik API&rsquo;s random words endpoint, which features random word generation by part of speech as well as frequency, I was able to weave together some fairly compelling random poems.</p>

<p>Then I stumbled upon Markov chains in my research, which on the first few tests in the command line quickly proved much more compelling than my patchwork NLG solution. The Markov chains were uncanny and required users click far fewer keywords to produce better sounding random poetry. It was a much lower bar to &ldquo;minimum emotional product&rdquo;.</p>

<p><code>ruby
def create_ephemeral_poem
  @poem_title = session[:ephemeral_poem].values[-4..-1].join(' ')
  @poem_body &lt;&lt; markov.generate_5_sentences
  @poet = "You"
end
</code></p>

<p>The most fascinating aspect of Markov chains to me is that they know nothing about parts of speech or linguistics. They are just pure mathematics. And yet they sound so human.</p>

<p>I implemented the Markov chain with the <a href="https://github.com/zolrath/marky_markov">Marky Markov gem</a>, though I will do my own <a href="https://gist.github.com/alexpatriquin/11226396">implementation in ruby</a> soon.</p>

<h3>Matching Algorithm</h3>

<p>PoemToday also features a daily email option. The app will email you a poem every morning, along with information about why that poem was matched to you on that day.</p>

<p>The app connects to APIs from Twitter, The New York Times and Forecast.io for user profile data sources. The app also uses the Wordnik API to score keywords on frequency from each data source. The Wordnik API goes back to 1800, but I limited it to 2000 for contemporary word usage.</p>

<p>I treated keyword frequency like golf scores &ndash; the lower, the better, so that rare words percolate to the top of poem matches and users' inboxes. You can get a good sense of how the user-to-poem daily matching algorithm works from this Gist.</p>

<p>```ruby Keyword-Poem Match Scoring <a href="https://github.com/alexpatriquin/poem-today/blob/master/app/models/poem_scorer.rb">https://github.com/alexpatriquin/poem-today/blob/master/app/models/poem_scorer.rb</a> source
  def score_by_keyword_source(result)</p>

<pre><code>case result[:keyword_source]
when :twitter
  result[:match_score] += 40
when :news
  result[:match_score] += 30
when :forecast
  result[:match_score] += 20
end
</code></pre>

<p>  end</p>

<p>  def score_by_match_type(result)</p>

<pre><code>case result[:match_type]
when :occasion || :subject || :poet
  result[:match_score] += 100
when :title
  result[:match_score] += 50
when :first_line
  result[:match_score] += 30  
when :content
  result[:match_score] += 10
end
</code></pre>

<p>  end</p>

<p>  def score_by_frequency(result)</p>

<pre><code>#birthdays, name days and holidays have 0 freq =&gt; 100 points
frequency_score = (1000 - result[:keyword_frequency]) / 10
result[:match_score] += frequency_score
</code></pre>

<p>  end
```</p>

<p>I also used a Postgres search gem, pg_search, to quickly search through all of the poems and their content. This was a lightweight option versus implementing a platform such as Solr or EC2.</p>

<p>Finally, I used <a href="http://localhost:4000/twilio-text-to-speech-in-rails-4">Twilio&rsquo;s text-to-speech</a> feature to read the poems in a fun robot voice. This was actually one of harder parts of the project as it required that I create a virtual <a href="http://localhost:4000/twilio-text-to-speech-in-rails-4">Twilio device</a> with Javascript on each poem page load and could only test it in production or with ultra-slow ngrok, which exposed my local web server to the internet.</p>

<p>PoemToday was one of my most technically ambitions project to date. Judging from the fascinated reactions of a few dozen beta users, I&rsquo;d say PoemToday is on a path to success and I look forward to continuing to build it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Tender]]></title>
    <link href="http://alexpatriquin.github.io/introducing-tender"/>
    <updated>2014-04-27T17:49:57-04:00</updated>
    <id>http://alexpatriquin.github.io/introducing-tender</id>
    <content type="html"><![CDATA[<p><a href="http://www.tendermessenger.com/">Tender</a> is a social payments app (think <a href="https://venmo.com/">Venmo</a>) for Bitcoin. Users can send or receive any amount of Bitcoin, including extremely small amounts which can be used to validated the identity of counter-parties.</p>

<p><a href="http://www.tendermessenger.com/"><img class="center" src="../images/post_images/tender-screenshot.png" width="500"></a></p>

<p>I built Tender (also on <a href="https://github.com/alexpatriquin/BitcoinMessenger">Github</a>) with <a href="https://twitter.com/CKohlbrenner">Chris Kohlbrenner</a>. I came up with the initial idea for the project as a Bitcoin dating site&hellip; hence the triple-play on words with the name &ldquo;Tender&rdquo;. However, Chris and I decided to generalize the app and make it usable (or at least instructive) for other open source projects as a general social messaging utility.</p>

<h3>Why Bitcoin Messaging?</h3>

<p>Bitcoin gets a lot of hype these days, but after working with the cryptocurrency a bit, I really do see its potential to transform online payments and much more. For example, a messaging system can require a very small amount of Bitcoin get sent with each message as a way to prevent or at least deter bulk volume spammers. After practicing our web development skills, our main purpose in building Tender was to demonstrate this anti-spam concept.</p>

<p>We used Ruby on Rails as the framework and built the Bitcoin transactions features with the Coinbase API and the messaging functionality with a gem called Mailboxer. In the process of weaving those two features together, we learned a lot about them. Payments and messaging share the concept of &ldquo;credits&rdquo; and &ldquo;debits&rdquo; to a balance or mailbox. Kind of like double-ledger accounting, we had to do a credit and a debit whenever a user sent money and a message to another user, and vice-versa. You can see that code play out in code below.</p>

<p>```ruby Tender Send-Request Bitcoin <a href="https://github.com/alexpatriquin/BitcoinMessenger/blob/master/app/controllers/conversations_controller.rb">https://github.com/alexpatriquin/BitcoinMessenger/blob/master/app/controllers/conversations_controller.rb</a> source
def send_message_and_bitcoin
  current_user.send_message(@recipient, @message=&lsquo;You\&rsquo;ve got Bitcoin.&rsquo;)
  current_user.send_bitcoin(@recipient, @amount)
  debit_balance(@amount)
  credit_balance(@recipient, @amount)
end</p>

<p>def send_message_and_request_bitcoin
  current_user.send_message(@recipient, @message=&lsquo;Send Bitcoin please.&rsquo;)
  current_user.request_bitcoin(@recipient, @amount)
end
```</p>

<h3>Coinbase and Typeahead.js</h3>

<p>To build Tender, we used Devise and Omniauth to authenticate users, enable them to sign in via Coinbase and to validate their balances on Coinbase. The app features a lot of validations and notices to users to confirm that their transactions go through when they should and shows descriptive alerts when they shouldn&rsquo;t, such as when the user has insufficient Bitcoin balance.</p>

<p>We also made it easy for users to find each other by implementing an autosuggest user search feature with Twitter&rsquo;s Typeahead.js, and brought the user objects to the views with the gon gem. Finally, Tender features a robust testing suite with Rspec and Capybara, at 92% code coverage.</p>

<p>This was a very interesting project on many levels, from working with a new payment type like Bitcoin, to getting deep into the mechanics of messaging. I also learned quite a bit about implementing complex Javascript features in Rails.</p>
]]></content>
  </entry>
  
</feed>
